#Kth Largest Element in BST

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def kth_largest(root, k):
    def inorder_traversal(node):
        if not node:
            return []
        return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)

    inorder_result = inorder_traversal(root)
    if k <= 0 or k > len(inorder_result):
        return None

    return inorder_result[-k]

root = TreeNode(5)
root.left = TreeNode(3)
root.right = TreeNode(8)
root.left.left = TreeNode(1)
root.left.right = TreeNode(4)
root.right.left = TreeNode(7)
root.right.right = TreeNode(9)

k = int(input("Enter the Kth value to be searched : "))
print(kth_largest(root, k)) 


OUTPUT:
Enter the Kth value to be searched : 3
The Kth largest is :  7