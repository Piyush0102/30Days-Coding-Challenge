#Bipartite Tree

def is_bipartite(graph):
    def dfs(node, color):
        visited[node] = color

        for neighbor in graph[node]:
            if visited[neighbor] == color:
                return False
            if visited[neighbor] == 0 and not dfs(neighbor, -color):
                return False
        
        return True

    n = len(graph)
    visited = [0] * n  

    for node in range(n):
        if visited[node] == 0 and not dfs(node, 1):
            return False

    return True

graph = {
    0: [1, 3],
    1: [0, 2],
    2: [1, 3],
    3: [0, 2]
}

print(is_bipartite(graph)) 


OUTPUT:
True